

/* Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


/* This file is automatically generated using the gen_nonblock_bindings.py tool */

#ifndef INCLUDED_GR_BLOCKS_PACKED_TO_UNPACKED_PYTHON_HPP
#define INCLUDED_GR_BLOCKS_PACKED_TO_UNPACKED_PYTHON_HPP

#include <gnuradio/blocks/packed_to_unpacked.h>

template<typename T>
void bind_packed_to_unpacked_template(py::module& m, const char *classname)
{
    using packed_to_unpacked      = gr::blocks::packed_to_unpacked<T>;

    py::class_<packed_to_unpacked, gr::block, std::shared_ptr<packed_to_unpacked>>(m, classname)
        .def(py::init(&gr::blocks::packed_to_unpacked<T>::make),
            py::arg("bits_per_chunk"),
            py::arg("endianness")
        )
        

        .def("to_basic_block",[](std::shared_ptr<packed_to_unpacked> p){
            return p->to_basic_block();
        })
        ;
} 

void bind_packed_to_unpacked(py::module& m)
{
    bind_packed_to_unpacked_template<std::uint8_t>(m,"packed_to_unpacked_bb");
    bind_packed_to_unpacked_template<std::int16_t>(m,"packed_to_unpacked_ss");
    bind_packed_to_unpacked_template<std::int32_t>(m,"packed_to_unpacked_ii");
} 

#endif /* INCLUDED_GR_BLOCKS_PACKED_TO_UNPACKED_PYTHON_HPP */
