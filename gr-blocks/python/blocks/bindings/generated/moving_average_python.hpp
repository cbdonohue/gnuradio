

/* Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


/* This file is automatically generated using the gen_nonblock_bindings.py tool */

#ifndef INCLUDED_GR_BLOCKS_MOVING_AVERAGE_PYTHON_HPP
#define INCLUDED_GR_BLOCKS_MOVING_AVERAGE_PYTHON_HPP

#include <gnuradio/blocks/moving_average.h>

template<typename T>
void bind_moving_average_template(py::module& m, const char *classname)
{
    using moving_average      = gr::blocks::moving_average<T>;

    py::class_<moving_average, gr::sync_block, std::shared_ptr<moving_average>>(m, classname)
        .def(py::init(&gr::blocks::moving_average<T>::make),
            py::arg("length"),
            py::arg("scale"),
            py::arg("max_iter") = 4096,
            py::arg("vlen") = 1
        )
        .def("length",&moving_average::length)
        .def("scale",&moving_average::scale)
        .def("set_length_and_scale",&moving_average::set_length_and_scale,
            py::arg("length"),
            py::arg("scale")
        )
        .def("set_length",&moving_average::set_length,
            py::arg("length")
        )
        .def("set_scale",&moving_average::set_scale,
            py::arg("scale")
        )

        .def("to_basic_block",[](std::shared_ptr<moving_average> p){
            return p->to_basic_block();
        })
        ;
} 


void bind_moving_average(py::module& m)
{
    bind_moving_average_template<std::int16_t>(m,"moving_average_ss");
    bind_moving_average_template<std::int32_t>(m,"moving_average_ii");
    bind_moving_average_template<float>(m,"moving_average_ff");
    bind_moving_average_template<gr_complex>(m,"moving_average_cc");

} 

#endif /* INCLUDED_GR_BLOCKS_MOVING_AVERAGE_PYTHON_HPP */
