

/* Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


/* This file is automatically generated using the gen_nonblock_bindings.py tool */

#ifndef INCLUDED_GR_BLOCKS_PEAK_DETECTOR_PYTHON_HPP
#define INCLUDED_GR_BLOCKS_PEAK_DETECTOR_PYTHON_HPP

#include <gnuradio/blocks/peak_detector.h>

template<typename T>
void bind_peak_detector_template(py::module& m, const char *classname)
{
    using peak_detector      = gr::blocks::peak_detector<T>;

    py::class_<peak_detector, gr::sync_block, std::shared_ptr<peak_detector>>(m, classname)
        .def(py::init(&gr::blocks::peak_detector<T>::make),
            py::arg("threshold_factor_rise") = .25,
            py::arg("threshold_factor_fall") = .40,
            py::arg("look_ahead") = 10,
            py::arg("alpha") = .001
        )

        .def("set_threshold_factor_rise",&peak_detector::set_threshold_factor_rise,
            py::arg("thr")
        )
        .def("set_threshold_factor_fall",&peak_detector::set_threshold_factor_fall,
            py::arg("thr")
        )
        .def("set_look_ahead",&peak_detector::set_look_ahead,
            py::arg("look")
        )
        .def("set_alpha",&peak_detector::set_alpha,
            py::arg("alpha")
        )
        .def("threshold_factor_rise",&peak_detector::threshold_factor_rise)
        .def("threshold_factor_fall",&peak_detector::threshold_factor_fall)
        .def("look_ahead",&peak_detector::look_ahead)
        .def("alpha",&peak_detector::alpha)                                               
        ;
} 

void bind_peak_detector(py::module& m)
{
    bind_peak_detector_template<std::int16_t>(m,"peak_detector_sb");
    bind_peak_detector_template<std::int32_t>(m,"peak_detector_ib");
    bind_peak_detector_template<float>(m,"peak_detector_fb");
} 

#endif /* INCLUDED_GR_BLOCKS_PEAK_DETECTOR_PYTHON_HPP */
