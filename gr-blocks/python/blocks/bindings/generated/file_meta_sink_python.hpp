

/* Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


/* This file is automatically generated using the gen_nonblock_bindings.py tool */

#ifndef INCLUDED_GR_BLOCKS_FILE_META_SINK_PYTHON_HPP
#define INCLUDED_GR_BLOCKS_FILE_META_SINK_PYTHON_HPP

#include <gnuradio/sync_block.h>
#include <gnuradio/blocks/file_meta_sink.h>

void bind_file_meta_sink(py::module& m)
{
    using file_meta_sink    = gr::blocks::file_meta_sink;

    py::enum_<gr::blocks::gr_file_types>(m,"gr_file_types")
        .value("GR_FILE_BYTE", gr::blocks::GR_FILE_BYTE) // 0
        .value("GR_FILE_CHAR", gr::blocks::GR_FILE_CHAR) // 0
        .value("GR_FILE_SHORT", gr::blocks::GR_FILE_SHORT) // 1
        .value("GR_FILE_INT", gr::blocks::GR_FILE_INT) // 2
        .value("GR_FILE_LONG", gr::blocks::GR_FILE_LONG) // 3
        .value("GR_FILE_LONG_LONG", gr::blocks::GR_FILE_LONG_LONG) // 4
        .value("GR_FILE_FLOAT", gr::blocks::GR_FILE_FLOAT) // 5
        .value("GR_FILE_DOUBLE", gr::blocks::GR_FILE_DOUBLE) // 6
        .export_values()
    ;

    py::class_<file_meta_sink,gr::sync_block,
        std::shared_ptr<file_meta_sink>>(m, "file_meta_sink")

        .def(py::init(&file_meta_sink::make),
           py::arg("itemsize"), 
           py::arg("filename"), 
           py::arg("samp_rate") = 1, 
           py::arg("relative_rate") = 1, 
           py::arg("type") = ::gr::blocks::GR_FILE_FLOAT, 
           py::arg("complex") = true, 
           py::arg("max_segment_size") = 1000000, 
           py::arg("extra_dict") = pmt::make_dict(), 
           py::arg("detached_header") = false 
        )
        

        .def("open",&file_meta_sink::open,
            py::arg("filename") 
        )
        .def("close",&file_meta_sink::close)
        .def("do_update",&file_meta_sink::do_update)
        .def("set_unbuffered",&file_meta_sink::set_unbuffered,
            py::arg("unbuffered") 
        )
        .def("to_basic_block",[](std::shared_ptr<file_meta_sink> p){
            return p->to_basic_block();
        })
        ;


} 

#endif /* INCLUDED_GR_BLOCKS_FILE_META_SINK_PYTHON_HPP */
