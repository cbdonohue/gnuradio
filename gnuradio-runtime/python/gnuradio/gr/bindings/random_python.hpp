

/* Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


/* This file is automatically generated using the gen_nonblock_bindings.py tool */

#ifndef INCLUDED_GR_RANDOM_PYTHON_HPP
#define INCLUDED_GR_RANDOM_PYTHON_HPP

#include <gnuradio/random.h>

void bind_random(py::module& m)
{
    using random    = gr::random;


    py::class_<random, std::shared_ptr<random>>(m, "random")
        .def(py::init<unsigned int,int,int>(),
           py::arg("seed") = 0, 
           py::arg("min_integer") = 0, 
           py::arg("max_integer") = 2 
        )
        .def(py::init<gr::random const &>(),
           py::arg("arg0") 
        )
        .def("reseed",&random::reseed,
            py::arg("seed") 
        )
        .def("set_integer_limits",&random::set_integer_limits,
            py::arg("minimum"), 
            py::arg("maximum") 
        )
        .def("ran_int",&random::ran_int)
        .def("ran1",&random::ran1)
        .def("gasdev",&random::gasdev)
        .def("laplacian",&random::laplacian)
        .def("rayleigh",&random::rayleigh)
        .def("impulse",&random::impulse,
            py::arg("factor") 
        )
        .def("rayleigh_complex",&random::rayleigh_complex)
        ;

} 

#endif /* INCLUDED_GR_RANDOM_PYTHON_HPP */
