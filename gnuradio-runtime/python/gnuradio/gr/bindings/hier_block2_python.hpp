

/* Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


/* This file is automatically generated using the gen_nonblock_bindings.py tool */

#ifndef INCLUDED_GR_HIER_BLOCK2_PYTHON_HPP
#define INCLUDED_GR_HIER_BLOCK2_PYTHON_HPP

// #pragma once

#include <gnuradio/hier_block2.h>
#include <gnuradio/basic_block.h>

void bind_hier_block2(py::module& m)
{
    using hier_block2      = gr::hier_block2;
    using basic_block_sptr = std::shared_ptr<gr::basic_block>;

    py::class_<hier_block2, gr::basic_block, std::shared_ptr<hier_block2>>(m, "hier_block2_pb")   
        .def("self",&hier_block2::self)
        .def(py::init(&gr::make_hier_block2),
            py::arg("name"), 
            py::arg("input_signature"), 
            py::arg("output_signature") 
        )
        .def("primitive_connect", (void (hier_block2::*)(basic_block_sptr)) &hier_block2::connect,
            py::arg("block") 
        )
        .def("primitive_connect", (void (hier_block2::*)(basic_block_sptr, int, basic_block_sptr, int)) &hier_block2::connect,
            py::arg("src"), 
            py::arg("src_port"), 
            py::arg("dst"), 
            py::arg("dst_port") 
        )

        .def("primitive_msg_connect",(void (hier_block2::*)(basic_block_sptr, pmt::pmt_t, basic_block_sptr, pmt::pmt_t)) &hier_block2::msg_connect,
            py::arg("src"), 
            py::arg("srcport"), 
            py::arg("dst"), 
            py::arg("dstport") 
        )
        .def("primitive_msg_connect",(void (hier_block2::*)(basic_block_sptr, std::string, basic_block_sptr, std::string)) &hier_block2::msg_connect,
            py::arg("src"), 
            py::arg("srcport"), 
            py::arg("dst"), 
            py::arg("dstport") 
        )
        .def("primitive_msg_disconnect",(void (hier_block2::*)(basic_block_sptr, pmt::pmt_t, basic_block_sptr, pmt::pmt_t))&hier_block2::msg_disconnect,
            py::arg("src"), 
            py::arg("srcport"), 
            py::arg("dst"), 
            py::arg("dstport") 
        )
        .def("primitive_msg_disconnect",(void (hier_block2::*)(basic_block_sptr, std::string, basic_block_sptr, std::string)) &hier_block2::msg_disconnect,
            py::arg("src"), 
            py::arg("srcport"), 
            py::arg("dst"), 
            py::arg("dstport") 
        )
        .def("primitive_disconnect",(void (hier_block2::*)(basic_block_sptr)) &hier_block2::disconnect,
            py::arg("block") 
        )
        .def("primitive_disconnect",(void (hier_block2::*)(basic_block_sptr, int, basic_block_sptr, int)) &hier_block2::disconnect,
            py::arg("src"), 
            py::arg("src_port"), 
            py::arg("dst"), 
            py::arg("dst_port") 
        )
        .def("disconnect_all",&hier_block2::disconnect_all)
        .def("lock",&hier_block2::lock)
        .def("unlock",&hier_block2::unlock)
        .def("max_output_buffer",&hier_block2::max_output_buffer,
            py::arg("port") = 0 
        )
        .def("set_max_output_buffer",(void (hier_block2::*)(int))&hier_block2::set_max_output_buffer,
            py::arg("max_output_buffer") 
        )
        .def("set_max_output_buffer",(void (hier_block2::*)(size_t, int))&hier_block2::set_max_output_buffer,
            py::arg("port"), 
            py::arg("max_output_buffer") 
        )
        .def("min_output_buffer",&hier_block2::min_output_buffer,
            py::arg("port") = 0 
        )
        .def("set_min_output_buffer",(void (hier_block2::*)(int))&hier_block2::set_min_output_buffer,
            py::arg("min_output_buffer") 
        )
        .def("set_min_output_buffer",(void (hier_block2::*)(size_t, int))&hier_block2::set_min_output_buffer,
            py::arg("port"), 
            py::arg("min_output_buffer") 
        )
        // .def("flatten",&hier_block2::flatten) // incomplete class
        .def("to_hier_block2",&hier_block2::to_hier_block2)
        .def("has_msg_port",&hier_block2::has_msg_port,
            py::arg("which_port") 
        )
        .def("message_port_is_hier",&hier_block2::message_port_is_hier,
            py::arg("port_id") 
        )
        .def("message_port_is_hier_in",&hier_block2::message_port_is_hier_in,
            py::arg("port_id") 
        )
        .def("message_port_is_hier_out",&hier_block2::message_port_is_hier_out,
            py::arg("port_id") 
        )
        .def("primitive_message_port_register_hier_in",&hier_block2::message_port_register_hier_in,
            py::arg("port_id") 
        )
        .def("primitive_message_port_register_hier_out",&hier_block2::message_port_register_hier_out,
            py::arg("port_id") 
        )
        .def("set_processor_affinity",&hier_block2::set_processor_affinity,
            py::arg("mask") 
        )
        .def("unset_processor_affinity",&hier_block2::unset_processor_affinity)
        .def("processor_affinity",&hier_block2::processor_affinity)
        .def("set_log_level",&hier_block2::set_log_level,
            py::arg("level") 
        )
        .def("log_level",&hier_block2::log_level)
        .def("all_min_output_buffer_p",&hier_block2::all_min_output_buffer_p)
        .def("all_max_output_buffer_p",&hier_block2::all_max_output_buffer_p)
        ;

    // m.def("make_hier_block2",&gr::make_hier_block2,
    //     py::arg("name"), 
    //     py::arg("input_signature"), 
    //     py::arg("output_signature") 
    // );
    // m.def("dot_graph",&gr::dot_graph,
    //     py::arg("hierblock2") 
    // );
    // m.def("cast_to_hier_block2_sptr",&gr::cast_to_hier_block2_sptr,
    //     py::arg("block") 
    // );
} 

#endif /* INCLUDED_GR_HIER_BLOCK2_PYTHON_HPP */
