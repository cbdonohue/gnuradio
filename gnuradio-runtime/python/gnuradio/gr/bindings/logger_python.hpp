

/* Copyright 2020 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */


/* This file is automatically generated using the gen_nonblock_bindings.py tool */

#ifndef INCLUDED_GR_LOGGER_PYTHON_HPP
#define INCLUDED_GR_LOGGER_PYTHON_HPP

#include <gnuradio/logger.h>

void bind_logger(py::module& m)
{
    using logger    = gr::logger;
    using logger_config    = gr::logger_config;


    py::class_<logger, std::shared_ptr<logger>>(m, "logger")
        .def(py::init<std::string>(),
           py::arg("logger_name") 
        )
        .def(py::init<gr::logger const &>(),
           py::arg("arg0") 
        )
        .def("set_level",&logger::set_level,
            py::arg("level") 
        )
        .def("get_level",&logger::get_level,
            py::arg("level") 
        )
        .def("debug",&logger::debug,
            py::arg("msg") 
        )
        .def("info",&logger::info,
            py::arg("msg") 
        )
        .def("notice",&logger::notice,
            py::arg("msg") 
        )
        .def("warn",&logger::warn,
            py::arg("msg") 
        )
        .def("error",&logger::error,
            py::arg("msg") 
        )
        .def("crit",&logger::crit,
            py::arg("msg") 
        )
        .def("alert",&logger::alert,
            py::arg("msg") 
        )
        .def("fatal",&logger::fatal,
            py::arg("msg") 
        )
        .def("emerg",&logger::emerg,
            py::arg("msg") 
        )
        .def("errorIF",&logger::errorIF,
            py::arg("cond"), 
            py::arg("msg") 
        )
        .def("log_assert",&logger::log_assert,
            py::arg("cond"), 
            py::arg("msg") 
        )
        .def("add_console_appender",&logger::add_console_appender,
            py::arg("target"), 
            py::arg("pattern") 
        )
        .def("set_console_appender",&logger::set_console_appender,
            py::arg("target"), 
            py::arg("pattern") 
        )
        .def("add_file_appender",&logger::add_file_appender,
            py::arg("filename"), 
            py::arg("append"), 
            py::arg("pattern") 
        )
        .def("set_file_appender",&logger::set_file_appender,
            py::arg("filename"), 
            py::arg("append"), 
            py::arg("pattern") 
        )
        .def("add_rollingfile_appender",&logger::add_rollingfile_appender,
            py::arg("filename"), 
            py::arg("filesize"), 
            py::arg("bkup_index"), 
            py::arg("append"), 
            py::arg("mode"), 
            py::arg("pattern") 
        )
        ;


    py::class_<logger_config, std::shared_ptr<logger_config>>(m, "logger_config")
        .def("get_filename",&logger_config::get_filename)
        .def("get_watch_period",&logger_config::get_watch_period)
        .def("load_config",&logger_config::load_config)
        // .def("load_config",&logger_config::load_config,
        //     py::arg("filename"), 
        //     py::arg("watch_period") = 0 
        // )
        .def("stop_watch",&logger_config::stop_watch)
        .def("reset_config",&logger_config::reset_config)
        ;

    // m.def("configure_default_loggers",&gr::configure_default_loggers,
    //     py::arg("l"), 
    //     py::arg("d"), 
    //     py::arg("name") 
    // );
    m.def("update_logger_alias",&gr::update_logger_alias,
        py::arg("name"), 
        py::arg("alias") 
    );
    m.def("logger_get_logger",&gr::logger_get_logger,
        py::arg("name") 
    );
    m.def("logger_load_config",&gr::logger_load_config,
        py::arg("config_filename") = "" 
    );
    // m.def("logger_reset_config",&gr::logger_reset_config);  // no implementation
    // m.def("logger_set_level",(void (*)(logger_ptr, const std::string&))&gr::logger_set_level,
    //     py::arg("logger"), 
    //     py::arg("level") 
    // );
    // m.def("logger_set_level",(void (*)(logger_ptr, log4cpp::Priority::Value))&gr::logger_set_level,
    //     py::arg("logger"), 
    //     py::arg("level") 
    // );
    // m.def("logger_get_level",&gr::logger_get_level,
    //     py::arg("logger"), 
    //     py::arg("level") 
    // );
    // m.def("logger_get_level",&gr::logger_get_level,
    //     py::arg("logger"), 
    //     py::arg("level") 
    // );
    // m.def("logger_add_appender",&gr::logger_add_appender,  // no implementation
    //     py::arg("logger"), 
    //     py::arg("appender") 
    // );
    // m.def("logger_set_appender",&gr::logger_set_appender,  // no implementation
    //     py::arg("logger"), 
    //     py::arg("appender") 
    // );
    m.def("logger_add_console_appender",&gr::logger_add_console_appender,
        py::arg("logger"), 
        py::arg("target"), 
        py::arg("pattern") 
    );
    m.def("logger_set_console_appender",&gr::logger_set_console_appender,
        py::arg("logger"), 
        py::arg("target"), 
        py::arg("pattern") 
    );
    m.def("logger_add_file_appender",&gr::logger_add_file_appender,
        py::arg("logger"), 
        py::arg("filename"), 
        py::arg("append"), 
        py::arg("pattern") 
    );
    m.def("logger_set_file_appender",&gr::logger_set_file_appender,
        py::arg("logger"), 
        py::arg("filename"), 
        py::arg("append"), 
        py::arg("pattern") 
    );
    m.def("logger_add_rollingfile_appender",&gr::logger_add_rollingfile_appender,
        py::arg("logger"), 
        py::arg("filename"), 
        py::arg("filesize"), 
        py::arg("bkup_index"), 
        py::arg("append"), 
        py::arg("mode"), 
        py::arg("pattern") 
    );
    m.def("logger_get_logger_names",&gr::logger_get_logger_names);
} 

#endif /* INCLUDED_GR_LOGGER_PYTHON_HPP */
